"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SignatureComputer_settings;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignatureComputer = void 0;
const forge = __importStar(require("node-forge"));
const pdf_lib_1 = require("pdf-lib");
function getSigningSettingsP12(settings) {
    const forgeCert = forge.util.createBuffer(settings.certificate.toString('binary'));
    const p12Asn1 = forge.asn1.fromDer(forgeCert);
    const p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, false, settings.password);
    const certBags = p12.getBags({ bagType: forge.pki.oids.certBag })[forge.pki.oids.certBag];
    if (!certBags) {
        throw new Error('Invalid "certBags".');
    }
    const keyBags = p12.getBags({ bagType: forge.pki.oids.pkcs8ShroudedKeyBag })[forge.pki.oids.pkcs8ShroudedKeyBag];
    if (!keyBags) {
        throw new Error('Invalid "keyBags".');
    }
    const privateKey = keyBags[0].key;
    if (!privateKey) {
        throw new Error('Invalid "privateKey".');
    }
    const certificates = [];
    let certificate;
    Object.keys(certBags).forEach((i) => {
        const cert = certBags[i].cert;
        const { publicKey } = cert;
        certificates.push(cert);
        if (privateKey.n.compareTo(publicKey.n) === 0
            && privateKey.e.compareTo(publicKey.e) === 0) {
            certificate = cert;
        }
    });
    if (typeof certificate === 'undefined') {
        throw new Error('Failed to find a certificate that matches the private key.');
    }
    return {
        privateKey,
        certificate,
        certificates
    };
}
function getSigningSettingsPem(settings) {
    const privateKey = forge.pki.decryptRsaPrivateKey(settings.key, settings.password);
    var certificate = forge.pki.certificateFromPem(settings.certificate);
    return {
        privateKey,
        certificate,
        certificates: [certificate]
    };
}
function getSigningSettings(settings) {
    if ('certificate' in settings && 'key' in settings) {
        return getSigningSettingsPem(settings);
    }
    else {
        return getSigningSettingsP12(settings);
    }
}
class SignatureComputer {
    constructor(settings) {
        _SignatureComputer_settings.set(this, void 0);
        __classPrivateFieldSet(this, _SignatureComputer_settings, getSigningSettings(settings), "f");
    }
    computeSignature(signBuffer, date) {
        const p7 = forge.pkcs7.createSignedData();
        p7.content = forge.util.createBuffer(signBuffer.toString('binary'));
        __classPrivateFieldGet(this, _SignatureComputer_settings, "f").certificates.forEach(cert => p7.addCertificate(cert));
        p7.addSigner({
            key: __classPrivateFieldGet(this, _SignatureComputer_settings, "f").privateKey,
            certificate: __classPrivateFieldGet(this, _SignatureComputer_settings, "f").certificate,
            digestAlgorithm: forge.pki.oids.sha256,
            authenticatedAttributes: [
                {
                    type: forge.pki.oids.contentType,
                    value: forge.pki.oids.data
                }, {
                    type: forge.pki.oids.messageDigest
                }, {
                    type: forge.pki.oids.signingTime,
                    value: pdf_lib_1.PDFString.fromDate(date).asString()
                }
            ],
        });
        p7.sign({ detached: true });
        return Buffer.from(forge.asn1.toDer(p7.toAsn1()).getBytes(), 'binary');
    }
}
exports.SignatureComputer = SignatureComputer;
_SignatureComputer_settings = new WeakMap();
