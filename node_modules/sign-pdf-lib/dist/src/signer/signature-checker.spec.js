"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const signature_checker_1 = require("./signature-checker");
const _helpers_1 = require("../../test/_helpers");
const assets_signature_checker_1 = require("../../test/_run-assets/signer/assets-signature-checker");
const chai_1 = require("chai");
it('_generate', function () {
    return __awaiter(this, void 0, void 0, function* () {
        const pdf = yield (0, _helpers_1.generatePdfAsync)({ pageCount: 2 });
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_signature_checker_1.signatureCheckerAssets.paths.pdf, pdf);
        const fieldPdf = yield (0, _helpers_1.generateFieldPdfAsync)(pdf);
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_signature_checker_1.signatureCheckerAssets.paths.fieldPdf, fieldPdf);
        const signedFieldPdf = yield (0, _helpers_1.generateSignedFieldPdfAsync)(fieldPdf);
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_signature_checker_1.signatureCheckerAssets.paths.signedFieldPdf, signedFieldPdf);
        const signedPdf = yield (0, _helpers_1.generateSignedPdfAsync)(pdf);
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_signature_checker_1.signatureCheckerAssets.paths.signedPdf, signedPdf);
        const twiceSignedPdf = yield (0, _helpers_1.generateSignedPdfAsync)(signedPdf, { name: 'Signature2' });
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_signature_checker_1.signatureCheckerAssets.paths.twiceSignedPdf, twiceSignedPdf);
        const tamperedSignedPdf = yield (0, _helpers_1.generateTamperedPdfAsync)(signedPdf);
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_signature_checker_1.signatureCheckerAssets.paths.tamperedSignedPdf, tamperedSignedPdf);
        const onlyFirstTamperedSignedPdf = yield (0, _helpers_1.generateOnlyFirstTamperedPdfAsync)(tamperedSignedPdf);
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_signature_checker_1.signatureCheckerAssets.paths.onlyFirstTamperedSignedPdf, onlyFirstTamperedSignedPdf);
        const appendedTamperedSignedPdf = yield (0, _helpers_1.generateAppendTamperedPdfAsync)(signedPdf);
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_signature_checker_1.signatureCheckerAssets.paths.appendedTamperedSignedPdf, appendedTamperedSignedPdf);
    });
});
describe('SignatureChecker', function () {
    describe('verifySignaturesAsync', function () {
        it('returns undefined for no signatures', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signatureChecker = yield signature_checker_1.SignatureChecker.fromPdfAsync(assets_signature_checker_1.signatureCheckerAssets.pdf);
                const res = yield signatureChecker.verifySignaturesAsync();
                (0, chai_1.expect)(res).to.be.undefined;
            });
        });
        it('returns for signature field', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signatureChecker = yield signature_checker_1.SignatureChecker.fromPdfAsync(assets_signature_checker_1.signatureCheckerAssets.fieldPdf);
                const res = yield signatureChecker.verifySignaturesAsync();
                (0, chai_1.expect)(res).to.be.deep.equal({ integrity: true, signatures: [{ isField: true, name: 'Signature' }] });
            });
        });
        it('returns for signed signature field', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signatureChecker = yield signature_checker_1.SignatureChecker.fromPdfAsync(assets_signature_checker_1.signatureCheckerAssets.signedFieldPdf);
                const res = yield signatureChecker.verifySignaturesAsync();
                yield _helpers_1.generateAsset.generateJsonAsync(assets_signature_checker_1.signatureCheckerAssets.paths.signedFieldCheckResult, res);
                (0, chai_1.expect)(res).to.be.deep.equal(assets_signature_checker_1.signatureCheckerAssets.signedFieldCheckResult);
            });
        });
        it('validates one signature', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signatureChecker = yield signature_checker_1.SignatureChecker.fromPdfAsync(assets_signature_checker_1.signatureCheckerAssets.signedPdf);
                const res = yield signatureChecker.verifySignaturesAsync();
                yield _helpers_1.generateAsset.generateJsonAsync(assets_signature_checker_1.signatureCheckerAssets.paths.signedCheckResult, res);
                (0, chai_1.expect)(res).to.be.deep.equal(assets_signature_checker_1.signatureCheckerAssets.signedCheckResult);
            });
        });
        it('validates two signatures', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signatureChecker = yield signature_checker_1.SignatureChecker.fromPdfAsync(assets_signature_checker_1.signatureCheckerAssets.twiceSignedPdf);
                const res = yield signatureChecker.verifySignaturesAsync();
                yield _helpers_1.generateAsset.generateJsonAsync(assets_signature_checker_1.signatureCheckerAssets.paths.twiceSignedCheckResult, res);
                (0, chai_1.expect)(res).to.be.deep.equal(assets_signature_checker_1.signatureCheckerAssets.twiceSignedCheckResult);
            });
        });
        it('detects tampered signature', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signatureChecker = yield signature_checker_1.SignatureChecker.fromPdfAsync(assets_signature_checker_1.signatureCheckerAssets.tamperedSignedPdf);
                const res = yield signatureChecker.verifySignaturesAsync();
                yield _helpers_1.generateAsset.generateJsonAsync(assets_signature_checker_1.signatureCheckerAssets.paths.tamperedSignedCheckResult, res);
                (0, chai_1.expect)(res).to.be.deep.equal(assets_signature_checker_1.signatureCheckerAssets.tamperedSignedCheckResult);
            });
        });
        it('detects only first tampered signature', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signatureChecker = yield signature_checker_1.SignatureChecker.fromPdfAsync(assets_signature_checker_1.signatureCheckerAssets.onlyFirstTamperedSignedPdf);
                const res = yield signatureChecker.verifySignaturesAsync();
                yield _helpers_1.generateAsset.generateJsonAsync(assets_signature_checker_1.signatureCheckerAssets.paths.onlyFirstTamperedSignedCheckResult, res);
                (0, chai_1.expect)(res).to.be.deep.equal(assets_signature_checker_1.signatureCheckerAssets.onlyFirstTamperedSignedCheckResult);
            });
        });
        it('detects tampered appended pdf', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signatureChecker = yield signature_checker_1.SignatureChecker.fromPdfAsync(assets_signature_checker_1.signatureCheckerAssets.appendedTamperedSignedPdf);
                const res = yield signatureChecker.verifySignaturesAsync();
                yield _helpers_1.generateAsset.generateJsonAsync(assets_signature_checker_1.signatureCheckerAssets.paths.appendedTamperedSignedCheckResult, res);
                (0, chai_1.expect)(res).to.be.deep.equal(assets_signature_checker_1.signatureCheckerAssets.appendedTamperedSignedCheckResult);
            });
        });
    });
});
