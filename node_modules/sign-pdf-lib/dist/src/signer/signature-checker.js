"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SignatureChecker_signingDoc;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignatureChecker = void 0;
const pdf_signing_document_1 = require("./pdf-signing-document");
const helpers_1 = require("../helpers");
const pdf_lib_1 = require("pdf-lib");
const forge = __importStar(require("node-forge"));
const _ = __importStar(require("lodash"));
function getMessageFromSignature(signature) {
    const p7Asn1 = forge.asn1.fromDer(signature, false);
    return forge.pkcs7.messageFromAsn1(p7Asn1);
}
class SignatureChecker {
    static fromPdfAsync(pdf) {
        return __awaiter(this, void 0, void 0, function* () {
            const signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(pdf);
            return new SignatureChecker(signingDoc);
        });
    }
    constructor(signingDoc) {
        _SignatureChecker_signingDoc.set(this, void 0);
        __classPrivateFieldSet(this, _SignatureChecker_signingDoc, signingDoc, "f");
    }
    verifySignaturesAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const signatures = __classPrivateFieldGet(this, _SignatureChecker_signingDoc, "f").getSignatures();
            if (_.isEmpty(signatures)) {
                return undefined;
            }
            const checks = [];
            let integrity = true;
            for (let i = 0; i < signatures.length; i++) {
                const signature = signatures[i];
                const check = yield this.verifySignatureAsync(signature, i == signatures.length - 1);
                checks.push(check);
                if ('integrity' in check) {
                    integrity = integrity && check.integrity;
                }
                else if (i !== signatures.length - 1) {
                    integrity = false;
                }
            }
            return {
                integrity,
                signatures: checks
            };
        });
    }
    verifySignatureAsync(signature, isLast) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!signature.get(pdf_lib_1.PDFName.of('V'))) {
                return {
                    name: (0, helpers_1.getSignatureName)(signature),
                    isField: true
                };
            }
            const signBuffer = __classPrivateFieldGet(this, _SignatureChecker_signingDoc, "f").getSignatureBuffer(signature);
            const signatureHexStr = __classPrivateFieldGet(this, _SignatureChecker_signingDoc, "f").getSignatureHexString(signature);
            const signatureStr = Buffer.from(signatureHexStr, 'hex').toString('latin1');
            const message = getMessageFromSignature(signatureStr);
            const appended = isLast && !__classPrivateFieldGet(this, _SignatureChecker_signingDoc, "f").isSignatureForEntireDocument(signature);
            const { rawCapture: { authenticatedAttributes, digestAlgorithm, }, } = message;
            const hashAlgorithmOid = forge.asn1.derToOid(digestAlgorithm);
            const hashAlgorithm = forge.pki.oids[hashAlgorithmOid].toLowerCase();
            const messageDigestAttr = forge.pki.oids.messageDigest;
            const fullAttrDigest = authenticatedAttributes.find((attr) => forge.asn1.derToOid(attr.value[0].value) === messageDigestAttr);
            const attrDigest = fullAttrDigest.value[1].value[0].value;
            const dataDigest = forge.md[hashAlgorithm]
                .create()
                .update(signBuffer.toString('latin1'))
                .digest()
                .getBytes();
            const integrity = dataDigest === attrDigest;
            return {
                name: (0, helpers_1.getSignatureName)(signature),
                integrity: integrity && !appended,
                details: (0, helpers_1.getSignatureDetails)(signature.lookup(pdf_lib_1.PDFName.of('V'), pdf_lib_1.PDFDict))
            };
        });
    }
}
exports.SignatureChecker = SignatureChecker;
_SignatureChecker_signingDoc = new WeakMap();
