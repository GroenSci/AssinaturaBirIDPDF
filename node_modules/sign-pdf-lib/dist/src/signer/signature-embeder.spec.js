"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const signature_embeder_1 = require("./signature-embeder");
const errors_1 = require("../errors");
const _helpers_1 = require("../../test/_helpers");
const generate_asset_1 = require("../../test/_helpers/generate-asset");
const assets_signature_embeder_1 = require("../../test/_run-assets/signer/assets-signature-embeder");
const chai_1 = require("chai");
it('_generate', function () {
    return __awaiter(this, void 0, void 0, function* () {
        const pdf = yield (0, _helpers_1.generatePdfAsync)({ pageCount: 2 });
        yield generate_asset_1.generateAsset.generateBinaryAsync(assets_signature_embeder_1.signatureEmbederAssets.paths.pdf, pdf);
        const placeholderPdf = yield (0, _helpers_1.generatePlaceholderPdfAsync)(pdf);
        yield generate_asset_1.generateAsset.generateBinaryAsync(assets_signature_embeder_1.signatureEmbederAssets.paths.placeholder, placeholderPdf);
        const signature = (0, _helpers_1.generateSignature)(placeholderPdf);
        yield generate_asset_1.generateAsset.generateBinaryAsync(assets_signature_embeder_1.signatureEmbederAssets.paths.signature, signature);
    });
});
describe('SignatureEmbeder', function () {
    let signatureEmbeder;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            signatureEmbeder = yield signature_embeder_1.SignatureEmbeder.fromPdfAsync(assets_signature_embeder_1.signatureEmbederAssets.placeholder);
        });
    });
    describe('getSignBuffer', function () {
        it('computes sign buffer', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signBuffer = signatureEmbeder.getSignBuffer();
                yield generate_asset_1.generateAsset.generateBinaryAsync(assets_signature_embeder_1.signatureEmbederAssets.paths.signBuffer, signBuffer);
                (0, chai_1.expect)(signBuffer).to.be.deep.equal(assets_signature_embeder_1.signatureEmbederAssets.signBuffer);
            });
        });
        it('throws for pdf without placeholder', function () {
            return __awaiter(this, void 0, void 0, function* () {
                yield (0, chai_1.expect)(signature_embeder_1.SignatureEmbeder.fromPdfAsync(assets_signature_embeder_1.signatureEmbederAssets.pdf)).to.be.rejectedWith(errors_1.NoPlaceholderError);
            });
        });
    });
    describe('embedSignature', function () {
        it('embeds signature', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signedPdf = signatureEmbeder.embedSignature(assets_signature_embeder_1.signatureEmbederAssets.signature);
                yield generate_asset_1.generateAsset.generateBinaryAsync(assets_signature_embeder_1.signatureEmbederAssets.paths.signedPdf, signedPdf);
                (0, chai_1.expect)(signedPdf).to.be.deep.equal(assets_signature_embeder_1.signatureEmbederAssets.signedPdf);
            });
        });
    });
    describe('embedHexSignature', function () {
        it('embeds signature', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signedPdf = signatureEmbeder.embedHexSignature(assets_signature_embeder_1.signatureEmbederAssets.signature.toString('hex').toUpperCase());
                yield generate_asset_1.generateAsset.generateBinaryAsync(assets_signature_embeder_1.signatureEmbederAssets.paths.signedPdf, signedPdf);
                (0, chai_1.expect)(signedPdf).to.be.deep.equal(assets_signature_embeder_1.signatureEmbederAssets.signedPdf);
            });
        });
        it('embeds smaller signature', function () {
            return __awaiter(this, void 0, void 0, function* () {
                (0, chai_1.expect)(() => signatureEmbeder.embedHexSignature('A'.repeat(4095))).to.not.throw();
            });
        });
        it('embeds exactly signature', function () {
            return __awaiter(this, void 0, void 0, function* () {
                (0, chai_1.expect)(() => signatureEmbeder.embedHexSignature('A'.repeat(4096))).to.not.throw();
            });
        });
        it('throws for bigger signature', function () {
            return __awaiter(this, void 0, void 0, function* () {
                (0, chai_1.expect)(() => signatureEmbeder.embedHexSignature('A'.repeat(4097))).to.throw(errors_1.TooSmallPlaceholderError);
            });
        });
    });
});
