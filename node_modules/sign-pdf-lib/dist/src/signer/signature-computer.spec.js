"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const signature_computer_1 = require("./signature-computer");
const _helpers_1 = require("../../test/_helpers");
const assets_signature_computer_1 = require("../../test/_run-assets/signer/assets-signature-computer");
const chai_1 = require("chai");
it('_generate', function () {
    return __awaiter(this, void 0, void 0, function* () {
        const pdf = yield (0, _helpers_1.generatePdfAsync)({ pageCount: 2 });
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_signature_computer_1.signatureComputerAssets.paths.pdf, pdf);
    });
});
describe('SignatureComputer', function () {
    const pemSignatureComputerSettings = {
        certificate: assets_signature_computer_1.signatureComputerAssets.pemCertificate,
        key: assets_signature_computer_1.signatureComputerAssets.pemKey,
        password: 'password'
    };
    const p12SignatureComputerSettings = {
        certificate: assets_signature_computer_1.signatureComputerAssets.p12Certificate,
        password: 'password'
    };
    const signDate = new Date(2023, 1, 20, 18, 47, 35);
    const signatureComputer = new signature_computer_1.SignatureComputer(p12SignatureComputerSettings);
    describe('computeSignature', function () {
        it('computes signature', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signature = signatureComputer.computeSignature(assets_signature_computer_1.signatureComputerAssets.pdf, signDate);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_signature_computer_1.signatureComputerAssets.paths.signature, signature);
                (0, chai_1.expect)(signature).to.be.deep.equal(assets_signature_computer_1.signatureComputerAssets.signature);
            });
        });
        it('computes different signature for different pdf', function () {
            const newPdf = Buffer.concat([assets_signature_computer_1.signatureComputerAssets.pdf, Buffer.from(' ')]);
            const signature = signatureComputer.computeSignature(newPdf, signDate);
            (0, chai_1.expect)(signature).to.not.be.deep.equal(assets_signature_computer_1.signatureComputerAssets.signature);
        });
        it('!!!!! computes same signature for different date', function () {
            const newSignDate = new Date(2023, 1, 20, 18, 47, 36);
            const signature = signatureComputer.computeSignature(assets_signature_computer_1.signatureComputerAssets.pdf, newSignDate);
            (0, chai_1.expect)(signature).to.be.deep.equal(assets_signature_computer_1.signatureComputerAssets.signature);
        });
        it('computes signature for pem settings', function () {
            const newSignatureComputer = new signature_computer_1.SignatureComputer(pemSignatureComputerSettings);
            const signature = newSignatureComputer.computeSignature(assets_signature_computer_1.signatureComputerAssets.pdf, signDate);
            (0, chai_1.expect)(signature).to.be.deep.equal(assets_signature_computer_1.signatureComputerAssets.signature);
        });
        it('computes signature for p12 settings', function () {
            const newSignatureComputer = new signature_computer_1.SignatureComputer(p12SignatureComputerSettings);
            const signature = newSignatureComputer.computeSignature(assets_signature_computer_1.signatureComputerAssets.pdf, signDate);
            (0, chai_1.expect)(signature).to.be.deep.equal(assets_signature_computer_1.signatureComputerAssets.signature);
        });
    });
});
