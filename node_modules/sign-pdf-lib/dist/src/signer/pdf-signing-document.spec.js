"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const pdf_signing_document_1 = require("./pdf-signing-document");
const errors_1 = require("../errors");
const _helpers_1 = require("../../test/_helpers");
const assets_pdf_signing_document_1 = require("../../test/_run-assets/signer/assets-pdf-signing-document");
const chai_1 = require("chai");
const pdf_lib_1 = require("pdf-lib");
it('_generate', function () {
    return __awaiter(this, void 0, void 0, function* () {
        const pdf = yield (0, _helpers_1.generatePdfAsync)({ pageCount: 2 });
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.pdf, pdf);
        const placeholderPdf = yield (0, _helpers_1.generatePlaceholderPdfAsync)(pdf);
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.placeholderPdf, placeholderPdf);
        const fieldPdf = yield (0, _helpers_1.generateFieldPdfAsync)(pdf);
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.fieldPdf, fieldPdf);
        const signedTwicePdf = yield (0, _helpers_1.generateSignedTwicePdfAsync)(pdf);
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.signedTwicePdf, signedTwicePdf);
    });
});
describe('PdfSigningDocument', function () {
    let signingDoc;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.pdf);
        });
    });
    describe('registerDict', function () {
        it('registers dict', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.registerDict({ 'Key': 'Value' });
                const registerDictPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.registerDictPdf, registerDictPdf);
                (0, chai_1.expect)(registerDictPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.registerDictPdf);
            });
        });
    });
    describe('addDict', function () {
        it('adds dict', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.addDict({ 'Key': 'Value' });
                const addDictPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.addDictPdf, addDictPdf);
                (0, chai_1.expect)(addDictPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.addDictPdf);
            });
        });
    });
    describe('addPageAnnot', function () {
        it('adds page annotation', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.addPageAnnot(0, pdf_lib_1.PDFRef.of(100));
                const addPageAnnotPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.addPageAnnotPdf, addPageAnnotPdf);
                (0, chai_1.expect)(addPageAnnotPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.addPageAnnotPdf);
            });
        });
    });
    describe('addFormField', function () {
        it('adds form field', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.addFormField(pdf_lib_1.PDFRef.of(100));
                const addFormFieldPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.addFormFieldPdf, addFormFieldPdf);
                (0, chai_1.expect)(addFormFieldPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.addFormFieldPdf);
            });
        });
    });
    describe('addPageContent', function () {
        it('adds page content', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.addPageContent(pdf_lib_1.PDFRef.of(100), 0);
                const addPageContentPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.addPageContentPdf, addPageContentPdf);
                (0, chai_1.expect)(addPageContentPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.addPageContentPdf);
            });
        });
    });
    describe('addPageResource', function () {
        it('adds page resource', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.addPageResource(pdf_lib_1.PDFRef.of(100), 0, 'background');
                const addPageResourcePdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.addPageResourcePdf, addPageResourcePdf);
                (0, chai_1.expect)(addPageResourcePdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.addPageResourcePdf);
            });
        });
    });
    describe('registerStream', function () {
        it('registers stream', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.registerStream('q Q', { 'Key': 'Value' });
                const registerStreamPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.registerStreamPdf, registerStreamPdf);
                (0, chai_1.expect)(registerStreamPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.registerStreamPdf);
            });
        });
    });
    describe('markObjAsChanged', function () {
        it('marks object as changed', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.markObjAsChanged(pdf_lib_1.PDFRef.of(1));
                const markObjAsChangedPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.markObjAsChangedPdf, markObjAsChangedPdf);
                (0, chai_1.expect)(markObjAsChangedPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.markObjAsChangedPdf);
            });
        });
    });
    describe('saveAsync', function () {
        it('saves pdf', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const savePdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.savePdf, savePdf);
                (0, chai_1.expect)(savePdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.savePdf);
            });
        });
    });
    describe('getPlaceholderRanges', function () {
        it('returns signature placeholder ranges', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.placeholderPdf);
                const placeholderRanges = signingDoc.getPlaceholderRanges();
                yield _helpers_1.generateAsset.generateJsonAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.placeholderRanges, placeholderRanges);
                (0, chai_1.expect)(placeholderRanges).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.placeholderRanges);
            });
        });
        it('throws if no signature placeholder', function () {
            return __awaiter(this, void 0, void 0, function* () {
                (0, chai_1.expect)(() => signingDoc.getPlaceholderRanges()).to.throw(errors_1.NoPlaceholderError);
            });
        });
        it('returns signature ranges', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.signedTwicePdf);
                const signatureRanges = signingDoc.getPlaceholderRanges();
                yield _helpers_1.generateAsset.generateJsonAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.signatureRanges, signatureRanges);
                (0, chai_1.expect)(signatureRanges).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.signatureRanges);
            });
        });
    });
    describe('ensureAcroForm', function () {
        it('ensures acro form', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.ensureAcroForm();
                const acroFormPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.acroFormPdf, acroFormPdf);
                (0, chai_1.expect)(acroFormPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.acroFormPdf);
                signingDoc.ensureAcroForm();
                const acroFormPdf2 = yield signingDoc.saveAsync();
                (0, chai_1.expect)(acroFormPdf2).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.acroFormPdf);
            });
        });
    });
    describe('ensurePageAnnots', function () {
        it('ensures page annotations', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.ensurePageAnnots(0);
                const pageAnnotsPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.pageAnnotsPdf, pageAnnotsPdf);
                (0, chai_1.expect)(pageAnnotsPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.pageAnnotsPdf);
                signingDoc.ensurePageAnnots(0);
                const pageAnnotsPdf2 = yield signingDoc.saveAsync();
                (0, chai_1.expect)(pageAnnotsPdf2).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.pageAnnotsPdf);
            });
        });
        it('ensures page annotations (page 2)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.ensurePageAnnots(1);
                const pageAnnotsPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.secondPageAnnotsPdf, pageAnnotsPdf);
                (0, chai_1.expect)(pageAnnotsPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.secondPageAnnotsPdf);
            });
        });
    });
    describe('ensurePageContentsArray', function () {
        it('ensures page contents array', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.ensurePageContentsArray(0);
                const pageContentsArrayPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.pageContentsArrayPdf, pageContentsArrayPdf);
                (0, chai_1.expect)(pageContentsArrayPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.pageContentsArrayPdf);
                signingDoc.ensurePageContentsArray(0);
                const pageContentsArrayPdf2 = yield signingDoc.saveAsync();
                (0, chai_1.expect)(pageContentsArrayPdf2).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.pageContentsArrayPdf);
            });
        });
        it('ensures page contents array (page 2)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.ensurePageContentsArray(1);
                const pageContentsArrayPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.secondPageContentsArrayPdf, pageContentsArrayPdf);
                (0, chai_1.expect)(pageContentsArrayPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.secondPageContentsArrayPdf);
            });
        });
    });
    describe('ensurePageResourcesXObject', function () {
        it('ensures page resources xobject', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.ensurePageResourcesXObject(0);
                const pageResourcesXobjectPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.pageResourcesXobjectPdf, pageResourcesXobjectPdf);
                (0, chai_1.expect)(pageResourcesXobjectPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.pageResourcesXobjectPdf);
                signingDoc.ensurePageResourcesXObject(0);
                const pageResourcesXobjectPdf2 = yield signingDoc.saveAsync();
                (0, chai_1.expect)(pageResourcesXobjectPdf2).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.pageResourcesXobjectPdf);
            });
        });
        it('ensures page resources xobject (page 2)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.ensurePageResourcesXObject(1);
                const pageResourcesXobjectPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.secondPageResourcesXobjectPdf, pageResourcesXobjectPdf);
                (0, chai_1.expect)(pageResourcesXobjectPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.secondPageResourcesXobjectPdf);
            });
        });
    });
    describe('embedImageAsync', function () {
        it('embeds jpg image', function () {
            return __awaiter(this, void 0, void 0, function* () {
                yield signingDoc.embedImageAsync(assets_pdf_signing_document_1.signingDocumentAssets.jpgImage);
                const jpgImagePdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.jpgImagePdf, jpgImagePdf);
                (0, chai_1.expect)(jpgImagePdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.jpgImagePdf);
            });
        });
        it('embeds png image', function () {
            return __awaiter(this, void 0, void 0, function* () {
                yield signingDoc.embedImageAsync(assets_pdf_signing_document_1.signingDocumentAssets.pngImage);
                const pngImagePdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.pngImagePdf, pngImagePdf);
                (0, chai_1.expect)(pngImagePdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.pngImagePdf);
            });
        });
        it('throws for bad image', function () {
            return __awaiter(this, void 0, void 0, function* () {
                yield (0, chai_1.expect)(signingDoc.embedImageAsync(assets_pdf_signing_document_1.signingDocumentAssets.badImage)).to.be.rejectedWith(errors_1.InvalidImageError);
            });
        });
    });
    describe('getSignatures', function () {
        it('returns no signatures (no signatures)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signatures = yield signingDoc.getSignatures();
                (0, chai_1.expect)(signatures).to.have.length(0);
            });
        });
        it('returns signatures', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.signedTwicePdf);
                const signatures = yield signingDoc.getSignatures();
                (0, chai_1.expect)(signatures).to.have.length(2);
            });
        });
        it('returns signatures (for placeholder)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.placeholderPdf);
                const signatures = yield signingDoc.getSignatures();
                (0, chai_1.expect)(signatures).to.have.length(1);
            });
        });
        it('returns signatures (for field)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.fieldPdf);
                const signatures = yield signingDoc.getSignatures();
                (0, chai_1.expect)(signatures).to.have.length(1);
            });
        });
    });
    describe('getSignature', function () {
        it('returns signature', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.signedTwicePdf);
                const signature = yield signingDoc.getSignature('Signature2');
                (0, chai_1.expect)(signature).to.not.be.undefined;
            });
        });
        it('throws for another signature', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.signedTwicePdf);
                (0, chai_1.expect)(() => signingDoc.getSignature('AnotherName')).to.throw(errors_1.SignatureNotFoundError);
            });
        });
    });
    describe('getSignaturePageNumber', function () {
        it('returns signature page', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.signedTwicePdf);
                const signaturePage = yield signingDoc.getSignaturePageNumber('Signature2');
                (0, chai_1.expect)(signaturePage).to.be.equal(1);
            });
        });
        it('throws for another signature', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.signedTwicePdf);
                (0, chai_1.expect)(() => signingDoc.getSignaturePageNumber('AnotherName')).to.throw(errors_1.SignatureNotFoundError);
            });
        });
    });
    describe('getSignatureBuffer', function () {
        it('returns signature buffer', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.signedTwicePdf);
                const signatures = signingDoc.getSignatures();
                (0, chai_1.expect)(signatures).to.have.length(2);
                const signatureBuffer = yield signingDoc.getSignatureBuffer(signatures[0]);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.signatureBuffer, signatureBuffer);
                (0, chai_1.expect)(signatureBuffer).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.signatureBuffer);
            });
        });
    });
    describe('getSignatureHexString', function () {
        it('returns signature hex string', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.signedTwicePdf);
                const signatures = signingDoc.getSignatures();
                (0, chai_1.expect)(signatures).to.have.length(2);
                const signatureHexString = yield signingDoc.getSignatureHexString(signatures[0]);
                yield _helpers_1.generateAsset.generateTextAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.signatureHexString, signatureHexString);
                (0, chai_1.expect)(signatureHexString).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.signatureHexString);
            });
        });
    });
    describe('isSignatureForEntireDocument', function () {
        it('returns true for last signature', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.signedTwicePdf);
                const signatures = signingDoc.getSignatures();
                (0, chai_1.expect)(signatures).to.have.length(2);
                const isForEntireDocument = yield signingDoc.isSignatureForEntireDocument(signatures[1]);
                (0, chai_1.expect)(isForEntireDocument).to.be.true;
            });
        });
        it('returns false for first signature', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.signedTwicePdf);
                const signatures = signingDoc.getSignatures();
                (0, chai_1.expect)(signatures).to.have.length(2);
                const isForEntireDocument = yield signingDoc.isSignatureForEntireDocument(signatures[0]);
                (0, chai_1.expect)(isForEntireDocument).to.be.false;
            });
        });
    });
    describe('getSignatureCount', function () {
        it('returns signature count', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.signedTwicePdf);
                const signatureCount = yield signingDoc.getSignatureCount();
                (0, chai_1.expect)(signatureCount).to.be.equal(2);
            });
        });
        it('returns signature count (no signature)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signatureCount = yield signingDoc.getSignatureCount();
                (0, chai_1.expect)(signatureCount).to.be.equal(0);
            });
        });
        it('returns signature count (placeholder)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.placeholderPdf);
                const signatureCount = yield signingDoc.getSignatureCount();
                (0, chai_1.expect)(signatureCount).to.be.equal(1);
            });
        });
        it('returns signature count (field)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.fieldPdf);
                const signatureCount = yield signingDoc.getSignatureCount();
                (0, chai_1.expect)(signatureCount).to.be.equal(1);
            });
        });
    });
    describe('getFields', function () {
        it('returns no fileds (no fields)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signatures = yield signingDoc.getFields();
                (0, chai_1.expect)(signatures).to.have.length(0);
            });
        });
        it('returns no fields (signed)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.signedTwicePdf);
                const signatures = yield signingDoc.getFields();
                (0, chai_1.expect)(signatures).to.have.length(0);
            });
        });
        it('returns no fields (for placeholder)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.placeholderPdf);
                const signatures = yield signingDoc.getFields();
                (0, chai_1.expect)(signatures).to.have.length(0);
            });
        });
        it('returns fields (for field)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc = yield pdf_signing_document_1.PdfSigningDocument.fromPdfAsync(assets_pdf_signing_document_1.signingDocumentAssets.fieldPdf);
                const signatures = yield signingDoc.getFields();
                (0, chai_1.expect)(signatures).to.have.length(1);
            });
        });
    });
    describe('embedSignatureFont', function () {
        it('embeds signature font', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.embedSignatureFont(0);
                const pageEmbededFontPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.pageEmbededFontPdf, pageEmbededFontPdf);
                (0, chai_1.expect)(pageEmbededFontPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.pageEmbededFontPdf);
                signingDoc.embedSignatureFont(0);
                const pageEmbededFontPdf2 = yield signingDoc.saveAsync();
                (0, chai_1.expect)(pageEmbededFontPdf2).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.pageEmbededFontPdf);
            });
        });
        it('embeds signature font (page 2)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                signingDoc.embedSignatureFont(1);
                const pageEmbededFontPdf = yield signingDoc.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signing_document_1.signingDocumentAssets.paths.secondPageEmbededFontPdf, pageEmbededFontPdf);
                (0, chai_1.expect)(pageEmbededFontPdf).to.be.deep.equal(assets_pdf_signing_document_1.signingDocumentAssets.secondPageEmbededFontPdf);
            });
        });
    });
});
