"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const pdf_document_visual_signer_1 = require("./pdf-document-visual-signer");
const errors_1 = require("../errors");
const _helpers_1 = require("../../test/_helpers");
const assets_pdf_document_visual_signer_1 = require("../../test/_run-assets/signer/assets-pdf-document-visual-signer");
const chai_1 = require("chai");
it('_generate', function () {
    return __awaiter(this, void 0, void 0, function* () {
        const pdf = yield (0, _helpers_1.generatePdf17Async)({ pageCount: 2 });
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.paths.pdf, pdf);
        const reverseYPdf = yield (0, _helpers_1.generatePdf13Async)({ pageCount: 2 });
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.paths.reverseYPdf, reverseYPdf);
        const placeholderPdf = yield (0, _helpers_1.generatePlaceholderPdfAsync)(pdf);
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.paths.placeholderPdf, placeholderPdf);
        const fieldPdf = yield (0, _helpers_1.generateFieldPdfAsync)(pdf);
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.paths.fieldPdf, fieldPdf);
    });
});
describe('PdfDocumentVisualSigner', function () {
    let pdfDocSigner;
    let addVisualParameters;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            addVisualParameters = {
                pageIndex: 0,
                rectangle: {
                    left: 50,
                    top: 100,
                    right: 50 + 214,
                    bottom: 100 + 70
                },
                background: assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.visual,
                texts: [
                    {
                        lines: [
                            'JOHN',
                            'DOE'
                        ]
                    }, {
                        lines: [
                            'Digitally signed by',
                            'JOHN DOE',
                            'Date: 2023.11.03',
                            '20:28:46 +02\'00\''
                        ]
                    }
                ],
                backgroundName: 'background1'
            };
            pdfDocSigner = yield pdf_document_visual_signer_1.PdfDocumentVisualSigner.fromPdfAsync(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.pdf);
        });
    });
    describe('addVisualSignatureAsync', function () {
        it('adds visual', function () {
            return __awaiter(this, void 0, void 0, function* () {
                yield pdfDocSigner.addVisualSignatureAsync(addVisualParameters);
                const visualPdf = yield pdfDocSigner.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.paths.visualPdf, visualPdf);
                (0, chai_1.expect)(visualPdf).to.be.deep.equal(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.visualPdf);
            });
        });
        it('adds visual (reverseY)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                pdfDocSigner = yield pdf_document_visual_signer_1.PdfDocumentVisualSigner.fromPdfAsync(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.reverseYPdf);
                addVisualParameters.reverseY = true;
                yield pdfDocSigner.addVisualSignatureAsync(addVisualParameters);
                const reverseYVisualPdf = yield pdfDocSigner.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.paths.reverseYVisualPdf, reverseYVisualPdf);
                (0, chai_1.expect)(reverseYVisualPdf).to.be.deep.equal(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.reverseYVisualPdf);
            });
        });
        it('adds visual (no background)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete addVisualParameters.background;
                yield pdfDocSigner.addVisualSignatureAsync(addVisualParameters);
                const noBackgroundVisualPdf = yield pdfDocSigner.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.paths.noBackgroundVisualPdf, noBackgroundVisualPdf);
                (0, chai_1.expect)(noBackgroundVisualPdf).to.be.deep.equal(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.noBackgroundVisualPdf);
            });
        });
        it('adds visual (no texts)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete addVisualParameters.texts;
                yield pdfDocSigner.addVisualSignatureAsync(addVisualParameters);
                const noTextsVisualPdf = yield pdfDocSigner.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.paths.noTextsVisualPdf, noTextsVisualPdf);
                (0, chai_1.expect)(noTextsVisualPdf).to.be.deep.equal(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.noTextsVisualPdf);
            });
        });
        it('adds visual (no optionals)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete addVisualParameters.background;
                delete addVisualParameters.texts;
                yield pdfDocSigner.addVisualSignatureAsync(addVisualParameters);
                const noOptionalsVisualPdf = yield pdfDocSigner.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.paths.noOptionalsVisualPdf, noOptionalsVisualPdf);
                (0, chai_1.expect)(noOptionalsVisualPdf).to.be.deep.equal(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.noOptionalsVisualPdf);
            });
        });
        it('throws for placeholder pdf', function () {
            return __awaiter(this, void 0, void 0, function* () {
                pdfDocSigner = yield pdf_document_visual_signer_1.PdfDocumentVisualSigner.fromPdfAsync(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.placeholderPdf);
                yield (0, chai_1.expect)(pdfDocSigner.addVisualSignatureAsync(addVisualParameters)).to.be.rejectedWith(errors_1.DigitallySignedError);
            });
        });
    });
    describe('saveAsync', function () {
        it('saves pdf', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const savePdf = yield pdfDocSigner.saveAsync();
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.paths.savePdf, savePdf);
                (0, chai_1.expect)(savePdf).to.be.deep.equal(assets_pdf_document_visual_signer_1.pdfDocumentVisualSignerAssets.savePdf);
            });
        });
    });
});
