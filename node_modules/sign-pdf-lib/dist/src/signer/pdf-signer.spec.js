"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const pdf_signer_1 = require("./pdf-signer");
const assets_pdf_signer_pdf_1 = require("../../test/_run-assets/signer/assets-pdf-signer-pdf");
const assets_pdf_signer_regression_1 = require("../../test/_run-assets/signer/assets-pdf-signer-regression");
const _assets_common_1 = require("../../test/_run-assets/_assets-common");
const _helpers_1 = require("../../test/_helpers");
const chai_1 = require("chai");
const chai_2 = require("chai");
const chaiAsPromised = require('chai-as-promised');
(0, chai_1.use)(chaiAsPromised);
it('_generate', function () {
    return __awaiter(this, void 0, void 0, function* () {
        const pdf = yield (0, _helpers_1.generatePdf17Async)({ pageCount: 2 });
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.pdf, pdf);
        const reverseYPdf = yield (0, _helpers_1.generatePdf13Async)({ pageCount: 2 });
        yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.reverseYPdf, reverseYPdf);
    });
});
describe('PdfSigner', function () {
    let pdfSigner;
    let info;
    let fieldInfo;
    let addFieldInfo;
    let visualInfo;
    let settings;
    beforeEach(function () {
        info = {
            pageNumber: 1,
            name: 'Signature',
            signature: {
                name: 'Test Signer',
                location: 'Timisoara',
                reason: 'Signing',
                date: new Date(2023, 1, 20, 18, 47, 35),
                contactInfo: 'signer@semnezonline.ro'
            },
            visual: {
                rectangle: { left: 50, top: 100, right: 50 + 214, bottom: 100 + 70 },
                background: assets_pdf_signer_pdf_1.pdfSignerAssets.signatureImage,
                texts: [
                    {
                        lines: [
                            'JOHN',
                            'DOE'
                        ]
                    }, {
                        lines: [
                            'Digitally signed by',
                            'JOHN DOE',
                            'Date: 2023.11.03',
                            '20:28:46 +02\'00\''
                        ]
                    }
                ]
            }
        };
        fieldInfo = {
            fieldName: 'Signature',
            signature: {
                name: 'Test Signer',
                location: 'Timisoara',
                reason: 'Signing',
                date: new Date(2023, 1, 20, 18, 47, 35),
                contactInfo: 'signer@semnezonline.ro',
            },
            visual: {
                background: assets_pdf_signer_pdf_1.pdfSignerAssets.signatureImage,
                texts: [
                    {
                        lines: [
                            'JOHN',
                            'DOE'
                        ]
                    }, {
                        lines: [
                            'Digitally signed by',
                            'JOHN DOE',
                            'Date: 2023.11.03',
                            '20:28:46 +02\'00\''
                        ]
                    }
                ]
            }
        };
        addFieldInfo = {
            pageNumber: 1,
            name: 'Signature',
            rectangle: { left: 50, top: 100, right: 50 + 214, bottom: 100 + 70 }
        };
        visualInfo = {
            pageNumber: 1,
            rectangle: { left: 50, top: 100, right: 50 + 214, bottom: 100 + 70 },
            background: assets_pdf_signer_pdf_1.pdfSignerAssets.signatureImage,
            texts: [
                {
                    lines: [
                        'JOHN',
                        'DOE'
                    ]
                }, {
                    lines: [
                        'Digitally signed by',
                        'JOHN DOE',
                        'Date: 2023.11.03',
                        '20:28:46 +02\'00\''
                    ]
                }
            ],
            // @ts-ignore
            backgroundName: 'background1'
        };
        settings = {
            signatureLength: 4000 - 6,
            rangePlaceHolder: 9999999,
            signatureComputer: {
                certificate: _assets_common_1.commonAssets.p12Certificate,
                password: 'password'
            }
        };
        pdfSigner = new pdf_signer_1.PdfSigner(settings);
    });
    describe('addPlaceholderAsync', function () {
        it('adds placeholder', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const placeholderPdf = yield pdfSigner.addPlaceholderAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, info);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.placeholderPdf, placeholderPdf);
                (0, chai_2.expect)(placeholderPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.placeholderPdf);
            });
        });
        it('adds placeholder (no name)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete info.name;
                const noNamePlaceholderPdf = yield pdfSigner.addPlaceholderAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, info);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noNamePlaceholderPdf, noNamePlaceholderPdf);
                (0, chai_2.expect)(noNamePlaceholderPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noNamePlaceholderPdf);
            });
        });
        it('adds placeholder (no signature)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete info.signature;
                const noSignaturePlaceholderPdf = yield pdfSigner.addPlaceholderAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, info);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noSignaturePlaceholderPdf, noSignaturePlaceholderPdf);
                (0, chai_2.expect)(noSignaturePlaceholderPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noSignaturePlaceholderPdf);
            });
        });
        it('adds placeholder (no visual)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete info.visual;
                const noVisualPlaceholderPdf = yield pdfSigner.addPlaceholderAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, info);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noVisualPlaceholderPdf, noVisualPlaceholderPdf);
                (0, chai_2.expect)(noVisualPlaceholderPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noVisualPlaceholderPdf);
            });
        });
        it('adds placeholder (no optionals)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete info.name;
                delete info.signature;
                delete info.visual;
                const noOptionalsPlaceholderPdf = yield pdfSigner.addPlaceholderAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, info);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noOptionalsPlaceholderPdf, noOptionalsPlaceholderPdf);
                (0, chai_2.expect)(noOptionalsPlaceholderPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noOptionalsPlaceholderPdf);
            });
        });
    });
    describe('addFieldAsync', function () {
        it('adds field', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const fieldPdf = yield pdfSigner.addFieldAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, addFieldInfo);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.fieldPdf, fieldPdf);
                (0, chai_2.expect)(fieldPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.fieldPdf);
            });
        });
        it('adds field (no name)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete addFieldInfo.name;
                const noNameFieldPdf = yield pdfSigner.addFieldAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, addFieldInfo);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noNameFieldPdf, noNameFieldPdf);
                (0, chai_2.expect)(noNameFieldPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noNameFieldPdf);
            });
        });
        it('adds field (no optionals)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete addFieldInfo.name;
                const noOptionalsFieldPdf = yield pdfSigner.addFieldAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, addFieldInfo);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noOptionalsFieldPdf, noOptionalsFieldPdf);
                (0, chai_2.expect)(noOptionalsFieldPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noOptionalsFieldPdf);
            });
        });
    });
    describe('signAsync', function () {
        it('signs document', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const signedPdf = yield pdfSigner.signAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, info);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.signedPdf, signedPdf);
                (0, chai_2.expect)(signedPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.signedPdf);
            });
        });
        it('signs document (chinese characters)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                info.signature.name = '小白';
                info.signature.location = '哈哈哈';
                info.signature.reason = '我同意';
                const signedPdf = yield pdfSigner.signAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, info);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.chineseSignedPdf, signedPdf);
                (0, chai_2.expect)(signedPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.chineseSignedPdf);
            });
        });
        it('signs document (no name)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete info.name;
                const noNameSignedPdf = yield pdfSigner.signAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, info);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noNameSignedPdf, noNameSignedPdf);
                (0, chai_2.expect)(noNameSignedPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noNameSignedPdf);
            });
        });
        it('signs document (no signature)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete info.signature;
                const noSignatureSignedPdf = yield pdfSigner.signAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, info);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noSignatureSignedPdf, noSignatureSignedPdf);
                (0, chai_2.expect)(noSignatureSignedPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noSignatureSignedPdf);
            });
        });
        it('signs document (no visual)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete info.visual;
                const noVisualSignedPdf = yield pdfSigner.signAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, info);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noVisualSignedPdf, noVisualSignedPdf);
                (0, chai_2.expect)(noVisualSignedPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noVisualSignedPdf);
            });
        });
        it('signs document (no optionals)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete info.name;
                delete info.signature;
                delete info.visual;
                const noOptionalsSignedPdf = yield pdfSigner.signAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, info);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noOptionalsSignedPdf, noOptionalsSignedPdf);
                (0, chai_2.expect)(noOptionalsSignedPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noOptionalsSignedPdf);
            });
        });
        it('signs already signed document', function () {
            return __awaiter(this, void 0, void 0, function* () {
                info.name = 'Signature2';
                const res = yield pdfSigner.signAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.signedPdf, info);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.twiceSignedPdf, res);
                (0, chai_2.expect)(res).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.twiceSignedPdf);
            });
        });
    });
    describe('signFieldAsync', function () {
        it('signs document', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const fieldSignedPdf = yield pdfSigner.signFieldAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.fieldPdf, fieldInfo);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.fieldSignedPdf, fieldSignedPdf);
                (0, chai_2.expect)(fieldSignedPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.fieldSignedPdf);
            });
        });
        it('signs document (no signature)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete fieldInfo.signature;
                const noSignatureFieldSignedPdf = yield pdfSigner.signFieldAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.fieldPdf, fieldInfo);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noSignatureFieldSignedPdf, noSignatureFieldSignedPdf);
                (0, chai_2.expect)(noSignatureFieldSignedPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noSignatureFieldSignedPdf);
            });
        });
        it('signs document (no visual)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete fieldInfo.visual;
                const noVisualFieldSignedPdf = yield pdfSigner.signFieldAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.fieldPdf, fieldInfo);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noVisualFieldSignedPdf, noVisualFieldSignedPdf);
                (0, chai_2.expect)(noVisualFieldSignedPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noVisualFieldSignedPdf);
            });
        });
        it('signs document (no optionals)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete fieldInfo.signature;
                delete fieldInfo.visual;
                const noOptionalsFieldSignedPdf = yield pdfSigner.signFieldAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.fieldPdf, fieldInfo);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noOptionalsFieldSignedPdf, noOptionalsFieldSignedPdf);
                (0, chai_2.expect)(noOptionalsFieldSignedPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noOptionalsFieldSignedPdf);
            });
        });
        it('signs specified field', function () {
            return __awaiter(this, void 0, void 0, function* () {
                addFieldInfo.rectangle.left += 250;
                addFieldInfo.rectangle.right += 250;
                addFieldInfo.name = 'Signature2';
                const twoFieldsPdf = yield pdfSigner.addFieldAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.fieldPdf, addFieldInfo);
                fieldInfo.fieldName = 'Signature2';
                const specifiedFieldSignedPdf = yield pdfSigner.signFieldAsync(twoFieldsPdf, fieldInfo);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.specifiedFieldSignedPdf, specifiedFieldSignedPdf);
                (0, chai_2.expect)(specifiedFieldSignedPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.specifiedFieldSignedPdf);
            });
        });
        it('throws when field not found', function () {
            return __awaiter(this, void 0, void 0, function* () {
                fieldInfo.fieldName = 'Another name';
                yield (0, chai_2.expect)(pdfSigner.signFieldAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.fieldPdf, fieldInfo)).to.be.rejected;
            });
        });
    });
    describe('signVisualAsync', function () {
        it('signs document', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const visualSignedPdf = yield pdfSigner.signVisualAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, visualInfo);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.visualSignedPdf, visualSignedPdf);
                (0, chai_2.expect)(visualSignedPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.visualSignedPdf);
            });
        });
        it('signs document (reverseY)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                visualInfo.reverseY = true;
                const visualSignedReverseYPdf = yield pdfSigner.signVisualAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.reverseYPdf, visualInfo);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.visualSignedReverseYPdf, visualSignedReverseYPdf);
                (0, chai_2.expect)(visualSignedReverseYPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.visualSignedReverseYPdf);
            });
        });
        it('signs document (no background)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete visualInfo.background;
                const noBackgroundVisualSignedPdf = yield pdfSigner.signVisualAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, visualInfo);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noBackgroundVisualSignedPdf, noBackgroundVisualSignedPdf);
                (0, chai_2.expect)(noBackgroundVisualSignedPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noBackgroundVisualSignedPdf);
            });
        });
        it('signs document (no texts)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete visualInfo.texts;
                const noTextsVisualSignedPdf = yield pdfSigner.signVisualAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, visualInfo);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noTextsVisualSignedPdf, noTextsVisualSignedPdf);
                (0, chai_2.expect)(noTextsVisualSignedPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noTextsVisualSignedPdf);
            });
        });
        it('signs document (no optionals)', function () {
            return __awaiter(this, void 0, void 0, function* () {
                delete visualInfo.background;
                delete visualInfo.texts;
                const noOptionalsVisualSignedPdf = yield pdfSigner.signVisualAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.pdf, visualInfo);
                yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.noOptionalsVisualSignedPdf, noOptionalsVisualSignedPdf);
                (0, chai_2.expect)(noOptionalsVisualSignedPdf).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.noOptionalsVisualSignedPdf);
            });
        });
    });
    describe('verifySignaturesAsync', function () {
        it('validates signatures', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const res = yield pdfSigner.verifySignaturesAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.signedPdf);
                yield _helpers_1.generateAsset.generateJsonAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.paths.checkSignedPdf, res);
                (0, chai_2.expect)(res).to.be.deep.equal(assets_pdf_signer_pdf_1.pdfSignerAssets.checkSignedPdf);
            });
        });
    });
    describe('getFieldsAsync', function () {
        it('returns fields', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const res = yield pdfSigner.getFieldsAsync(assets_pdf_signer_pdf_1.pdfSignerAssets.fieldPdf);
                (0, chai_2.expect)(res).to.be.deep.equal([{ name: 'Signature', pageNumber: 1 }]);
            });
        });
    });
});
describe('PdfSigner Regression', function () {
    let pdfSigner;
    let fieldInfo;
    let settings;
    beforeEach(function () {
        fieldInfo = {
            fieldName: 'Signature1',
            signature: {
                name: 'Test Signer',
                location: 'Timisoara',
                reason: 'Signing',
                date: new Date(2023, 1, 20, 18, 47, 35),
                contactInfo: 'signer@semnezonline.ro',
            },
            visual: {
                background: assets_pdf_signer_pdf_1.pdfSignerAssets.signatureImage,
                texts: [
                    {
                        lines: [
                            'JOHN',
                            'DOE'
                        ]
                    }, {
                        lines: [
                            'Digitally signed by',
                            'JOHN DOE',
                            'Date: 2023.11.03',
                            '20:28:46 +02\'00\''
                        ]
                    }
                ]
            }
        };
        settings = {
            signatureLength: 4000 - 6,
            rangePlaceHolder: 9999999,
            signatureComputer: {
                certificate: _assets_common_1.commonAssets.p12Certificate,
                password: 'password'
            }
        };
        pdfSigner = new pdf_signer_1.PdfSigner(settings);
    });
    it('signs field', function () {
        return __awaiter(this, void 0, void 0, function* () {
            fieldInfo.fieldName = 'Signature28';
            const signed = yield pdfSigner.signFieldAsync(assets_pdf_signer_regression_1.pdfSignerAssetsRegression.fieldPdf, fieldInfo);
            yield _helpers_1.generateAsset.generateBinaryAsync(assets_pdf_signer_regression_1.pdfSignerAssetsRegression.paths.fieldSignedPdf, signed);
            (0, chai_2.expect)(signed).to.be.deep.equal(assets_pdf_signer_regression_1.pdfSignerAssetsRegression.fieldSignedPdf);
            const fields = yield pdfSigner.getFieldsAsync(assets_pdf_signer_regression_1.pdfSignerAssetsRegression.fieldPdf);
            (0, chai_2.expect)(fields).to.be.deep.equal([{ name: 'Signature28', pageNumber: 9 }]);
        });
    });
    it('check signatures', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const checkResult = yield pdfSigner.verifySignaturesAsync(assets_pdf_signer_regression_1.pdfSignerAssetsRegression.verifySignaturesPdf);
            yield _helpers_1.generateAsset.generateJsonAsync(assets_pdf_signer_regression_1.pdfSignerAssetsRegression.paths.checkResult, checkResult);
            (0, chai_2.expect)(checkResult).to.be.deep.equal(assets_pdf_signer_regression_1.pdfSignerAssetsRegression.checkResult);
        });
    });
});
