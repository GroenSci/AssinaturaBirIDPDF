"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPdfRangesFromSignature = exports.getSignatureName = exports.getSignatureDetails = void 0;
const errors_1 = require("../errors");
const pdf_lib_1 = require("pdf-lib");
function getSignatureDetails(signature) {
    const details = {};
    const name = getStringMaybe(signature, 'Name');
    if (name)
        details.name = name;
    const reason = getStringMaybe(signature, 'Reason');
    if (reason)
        details.reason = reason;
    const location = getStringMaybe(signature, 'Location');
    if (location)
        details.location = location;
    const date = getDateMaybe(signature, 'M');
    if (date)
        details.date = date;
    return details;
}
exports.getSignatureDetails = getSignatureDetails;
function getSignatureName(signature) {
    const value = signature.lookup(pdf_lib_1.PDFName.of('T'), pdf_lib_1.PDFString);
    return value.asString();
}
exports.getSignatureName = getSignatureName;
function getPdfRangesFromSignature(signature) {
    if (!signature.get(pdf_lib_1.PDFName.of('V'))) {
        throw new errors_1.NoPlaceholderError();
    }
    const signatureV = signature.lookup(pdf_lib_1.PDFName.of('V'), pdf_lib_1.PDFDict);
    const byteRange = signatureV.lookup(pdf_lib_1.PDFName.of('ByteRange'), pdf_lib_1.PDFArray);
    const start1 = byteRange.get(0).asNumber();
    const length1 = byteRange.get(1).asNumber();
    const start2 = byteRange.get(2).asNumber();
    const length2 = byteRange.get(3).asNumber();
    return {
        before: {
            start: start1,
            length: length1
        },
        signature: {
            start: start1 + length1,
            length: start2 - (start1 + length1)
        },
        after: {
            start: start2,
            length: length2
        }
    };
}
exports.getPdfRangesFromSignature = getPdfRangesFromSignature;
function getStringMaybe(dict, key) {
    const value = dict.lookupMaybe(pdf_lib_1.PDFName.of(key), pdf_lib_1.PDFString);
    return value === null || value === void 0 ? void 0 : value.asString();
}
function getDateMaybe(dict, key) {
    const value = dict.lookupMaybe(pdf_lib_1.PDFName.of(key), pdf_lib_1.PDFString);
    return value === null || value === void 0 ? void 0 : value.decodeDate();
}
