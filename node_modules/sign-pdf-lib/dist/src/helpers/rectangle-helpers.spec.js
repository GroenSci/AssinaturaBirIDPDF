"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rectangle_helpers_1 = require("./rectangle-helpers");
const chai_1 = require("chai");
describe('computeAbsolutePageReverseRectangle', function () {
    const referenceSize = {
        width: 100,
        height: 200
    };
    it('computes absolute rectangle for absolute rectangle', function () {
        const relativeRectangle = {
            left: 10,
            right: 20,
            top: 15,
            bottom: 25
        };
        const computedRectangle = (0, rectangle_helpers_1.computeAbsolutePageReverseRectangle)(relativeRectangle, referenceSize);
        (0, chai_1.expect)(computedRectangle).to.be.deep.equal({ left: 10, right: 20, top: 185, bottom: 175 });
    });
    it('computes absolute rectangle for relative rectangle', function () {
        const relativeRectangle = {
            left: -90,
            right: -80,
            top: -185,
            bottom: -175
        };
        const computedRectangle = (0, rectangle_helpers_1.computeAbsolutePageReverseRectangle)(relativeRectangle, referenceSize);
        (0, chai_1.expect)(computedRectangle).to.be.deep.equal({ left: 10, right: 20, top: 185, bottom: 175 });
    });
});
describe('computeAbsolutePageRectangle', function () {
    const referenceSize = {
        width: 100,
        height: 200
    };
    it('computes absolute rectangle for absolute rectangle', function () {
        const relativeRectangle = {
            left: 10,
            right: 20,
            top: 15,
            bottom: 25
        };
        const computedRectangle = (0, rectangle_helpers_1.computeAbsolutePageRectangle)(relativeRectangle, referenceSize);
        (0, chai_1.expect)(computedRectangle).to.be.deep.equal({ left: 10, right: 20, top: 15, bottom: 25 });
    });
    it('computes absolute rectangle for relative rectangle', function () {
        const relativeRectangle = {
            left: -90,
            right: -80,
            top: -185,
            bottom: -175
        };
        const computedRectangle = (0, rectangle_helpers_1.computeAbsolutePageRectangle)(relativeRectangle, referenceSize);
        (0, chai_1.expect)(computedRectangle).to.be.deep.equal({ left: 10, right: 20, top: 15, bottom: 25 });
    });
});
